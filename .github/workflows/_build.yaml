name: Build Docker image

on:
  workflow_call:
    inputs:
      path:
        required: true
        type: string

defaults:
  run:
    shell: pwsh

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.select.outputs.environment }}
    steps:
      - name: Select environment
        id: select
        run: |
          $InformationPreference = "Continue"
          $environment = "${{ github.ref_type }}" -eq "tag" ? "Docker Hub" : "GitHub Packages"
          Write-Output "environment=$environment" >> "$Env:GITHUB_OUTPUT"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: prepare
    environment: ${{ needs.prepare.outputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Test
        shell: pwsh
        working-directory: ${{ inputs.path }}
        env:
          DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
        run: |
          Import-Module "$Env:GITHUB_WORKSPACE/Utilities.psm1"

          # Register handlers for additional architectures
          docker run --privileged "docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64"

          Invoke-Pester -Configuration @{
              Output = @{
                  Verbosity = "Detailed"
              }
              Run = @{
                  Exit = $true
              }
          }

      - name: Build
        shell: pwsh
        working-directory: ${{ inputs.path }}
        env:
          DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
        run: |
          Import-Module "$Env:GITHUB_WORKSPACE/Utilities.psm1"

          $metadata = Get-DockerMetadata "${{ inputs.path }}"

          # Register handlers for additional architectures
          docker run --privileged "docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64"

          # Create a new builder which uses the "docker-container" driver, which supports multi-platform builds
          docker buildx create --name "multi-platform" --driver "docker-container"
          $Env:BUILDX_BUILDER = "multi-platform"

          # Target multiple platforms
          $platform = [string]::Join(",", $metadata.Platforms)

          if ("${{ github.event_name }}" -eq "push" -and "${{ github.ref_type }}" -eq "tag") {
              $version = (Split-Path "${{ github.ref_name }}" -Leaf).Substring(1)
              if ($version -ne "v$($metadata.Version)") {
                  throw "Git tag does not match the version declared in the Dockerfile's metadata"
              }
          }
          else {
              $version = "$($metadata.Version)-${{ github.ref_name }}-${{ github.run_number }}"
          }

          # Log in to the Docker Hub registry
          Write-Output "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          $name = "$($metadata.Name):$($metadata.Version)"

          # Build the image
          docker buildx build --platform "$platform" --output "type=image,name=$name,push=$push" .