name: Build Docker image

on:
  workflow_call:
    inputs:
      path:
        required: true
        type: string

defaults:
  run:
    shell: pwsh

jobs:
  publish:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Test
        shell: pwsh
        working-directory: ${{ inputs.path }}
        run: |
          Invoke-Pester -Configuration @{
             Run = @{
                 Exit = $true
             }
          }

      - name: Build
        shell: pwsh
        working-directory: ${{ inputs.path }}
        run: |
          $multiPlatform = $false

          if ($multiPlatform) {
              # Register handlers for additional architectures
              docker run --privileged "docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64"

              # Create a new builder which uses the "docker-container" driver, which supports multi-platform builds
              docker buildx create --name "multi-platform" --driver "docker-container"
              $Env:BUILDX_BUILDER = "multi-platform"

              # Target multiple platforms
              $platform = "linux/amd64,linux/arm64"

              # Export the manifest list to a registry
              $output = "type=image,push=true"
          }
          else {
              # Use the "default" builder which uses the "docker" driver
              $Env:BUILDX_BUILDER = "default"

              # Target the client's platform
              $platform = "local"

              # Do not export the image to a registry
              # The image will appear in `docker images` thanks to the "default" builder's "docker" driver
              $output = "type=image,push=false"
          }

          # Build the multi-platform image using the "multi-platform" builder
          docker buildx build --platform "$platform" --output "$output" --tag "${{ inputs.path }}" .

          $image = ConvertFrom-Json $(docker image inspect --format "json" "${{ inputs.path }}")

          if ($multiPlatform) {
              $image.Architecture
          }
          else {
              $image[0].Architecture
              $image[1].Architecture
          }
